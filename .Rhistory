dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all=TRUE, by=c("CountryCode"))
sum(!is.na(unique(dt$rankingGDP)))
dt[order(rankingGDP, decreasing=TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][13]
library(data.table)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
dtGDP <- data.table(read.csv(f, skip=4, nrows=215))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all=TRUE, by=c("CountryCode"))
sum(!is.na(unique(dt$rankingGDP)))
dt[order(rankingGDP, decreasing=TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][13]
dt[, mean(rankingGDP, na.rm=TRUE), by=Income.Group]
breaks <- quantile(dt$rankingGDP, probs=seq(0, 1, 0.2), na.rm=TRUE)
dt$quantileGDP <- cut(dt$rankingGDP, breaks=breaks)
dt[Income.Group == "Lower middle income", .N, by=c("Income.Group", "quantileGDP")]
dt$quantileGDP <- cut(dt$rankingGDP, breaks=5)
dt[Income.Group == "Lower middle income", .N, by=c("Income.Group", "quantileGDP")]
swirl()
swirl()
swirl()
library(swirl)
swirl()
cran <- tbl_df(mydf)
skip()
swirl()
skip
info()
skip()
swirl()
mydf=cran
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,
| r_arch:country)
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
select(cran,-5:20)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran,!is.na(r_version))
cran2=select(cran, size:ip_id)
cran2 = select(cran, size:ip_id)
info()
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version),ip_id)
cran3 <- select(cran, ip_id, package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size=1000+size)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id) ,
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
summit()
submit()
submit()
tbl
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count>679)
top_counts <-filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count) )
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
swirl()
students
?gather
gather(students,sex, count, -grade)
students2
res <- gather(students2,sex_class,count,-grade)
res
?separate
separate(res, sex_class, c("sex","class") )
submit()
students3
submit()
spread()
spread
?spread
submit()
submit()
submit()
submit()
library(readr)
parse_numeric("class5")
submit()
submit()
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = parse_numeric(class))### Call to mutate() goes here %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = parse_number(class))### Call to mutate() goes here %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = parse_number(class))### Call to mutate() goes here
%>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = parse_number(class))### Call to mutate() goes here
%>% print
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = parse_number(class))### Call to mutate() goes here
%>% print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = parse_number(class)) %>%
print
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
?bind_rows
bind_rows(pass,failed)
bind_rows(passed,failed)
sat
submit()
submit()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_data <- ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
date_time
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55).
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <-update(this_moment, hours=17, minutes=18)
this_moment
nyc<-now(tz="America/New_York")
nyc
depart<-nyc + days(2)
depart
depart<-update(depart, hours=17,minutes=34)
depart
arrive<-depart + hours(15)+minutes(50)
?with_tz
with_tz(arrive,tzone="Asia/Hong_Kong")
arrive<-with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?interval
how_long<-(last_time,arrive)
how_long<-interval(last_time,arrive)
as.period(how_long)
stopwatch()
ida=download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv,~/Desktop)
ida=download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile = "~/Desktop")
ida <- read.csv("~/Desktop/ida.csv")
View(ida)
?strsplit
strsplit(rownames(ida),"wgtp")
rowsplit=strsplit(rownames(ida),"wgtp")
rowsplit[123]
rowsplit[[123]]
rowsplit=strsplit(columnnames(ida),"wgtp")
rowsplit=strsplit(colnames(ida),"wgtp")
rowsplit[[123]]
GDP=read.csv("GDP.csv", skip=5,header=FALSE)
View(GDP)
library(dplyr)
library(tidyr)
GDP=select(GDP, -V3,-(V6:V10))
colnames(GDP)=c("counabbr","ranking","country","economy")
avgGDP<-GDP
%>% sub(",","",economy)
%>% summarize(mean(economy))
avgGDP<-GDP %>%
sub(",","",economy) %>%
summarize(mean(economy))
avgGDP<-GDP %>%
gsub(",","",economy) %>%
summarize(mean(economy))
gsub(",","",GDP$economy)
avgGDP=summarize(mean(GDP$economy))
avgGDP=mean(GDP$economy,na.rm=TRUE)
avgGDP=mean(as.numeric(GDP$economy),na.rm=TRUE)
avgGDP
GDP=gsub(",","",GDP$economy)
avgGDP=mean(as.numeric(GDP$economy),na.rm=TRUE)
GDP$economy=gsub(",","",GDP$economy)
GDP=gsub(",", "",GDP$economy)
GDP$economy=as.character(GDP$economy)
GDP=as.data.frame(GDP)
GDP=gsub(",", "",GDP$economy)
avgGDP=mean(as.numeric(GDP$economy),na.rm=TRUE)
GDP=read.csv("GDP.csv", skip=5,header=FALSE)
GDP=select(GDP, -V3,-(V6:V10))
colnames(GDP)=c("counabbr","ranking","country","economy")
GDP=gsub(",", "",GDP$economy)
avgGDP=mean(as.numeric(GDP$economy),na.rm=TRUE)
GDP=data.frame(read.csv("GDP.csv", skip=5,header=FALSE))
GDP=select(GDP, -V3,-(V6:V10))
colnames(GDP)=c("counabbr","ranking","country","economy")
GDP=gsub(",", "",GDP$economy)
avgGDP=mean(as.numeric(GDP$economy),na.rm=TRUE)
GDP=data.frame(read.csv("GDP.csv", skip=5,header=FALSE))
GDP=select(GDP, -V3,-(V6:V10))
colnames(GDP)=c("counabbr","ranking","country","economy")
GDP=as.numeric(gsub(",", "",GDP$economy))
GDP=data.table(read.csv("GDP.csv", skip=5,header=FALSE))
library(data.table)
GDP=data.table(read.csv("GDP.csv", skip=5,header=FALSE))
GDP=select(GDP, -V3,-(V6:V10))
colnames(GDP)=c("counabbr","ranking","country","economy")
View(GDP)
GDP=as.numeric(gsub(",", "",GDP$economy))
GDP=data.table(read.csv("GDP.csv", skip=5,header=FALSE))
str("GDP")
str(GDP)
GDP=select(GDP, -V3,-(V6:V10))
colnames(GDP)=c("counabbr","ranking","country","economy")
str(GDP)
GDP=GDP[1:231,]
GDP=as.numeric(gsub(",", "",GDP$economy))
GDP=data.table(read.csv("GDP.csv", skip=5,header=FALSE,stringsAsFactors = FALSE))
GDP=select(GDP, -V3,-(V6:V10))
colnames(GDP)=c("counabbr","ranking","country","economy")
GDP=GDP[1:231,]
GDP=as.numeric(gsub(",", "",GDP$economy))
GDP=data.table(read.csv("GDP.csv", skip=5,header=FALSE,stringsAsFactors = FALSE))
GDP=select(GDP, -V3,-(V6:V10))
colnames(GDP)=c("counabbr","ranking","country","economy")
GDP=GDP[1:231,]
str(GDP)
eco=as.numeric(gsub(",", "",GDP$economy))
avgGDP=mean(as.numeric(GDP$economy),na.rm=TRUE)
avgGDP=mean(eco,na.rm=TRUE)
avgGDP
eco
GDP=GDP[1:190,]
eco=as.numeric(gsub(",", "",GDP$economy))
avgGDP=mean(eco,na.rm=TRUE)
avgGDP
isUnited=grepl("^United",GDP$country)
summary(isUnited)
GDP=GDP[!is.na(GDP$counabbr),]
isUnited=grepl("^United",GDP$country)
EDU <- read.csv("~/Desktop/EDU.csv")
View(EDU)
EDU <- read.csv("~/Desktop/EDU.csv", stringsAsFactors=FALSE)
View(EDU)
summary(EDU)
str(EDU)
merge(EDU,GDP,by =c("CountryCode","country"))
merge(EDU,GDP,by.x ="CountryCode",by.y="country")
mergeGDPEDU=merge(EDU,GDP,by.x ="CountryCode",by.y="country")
str(mergeGDPEDU)
mergeGDPEDU=merge(EDU,GDP,by.x ="CountryCode",by.y="country",all=TRUE)
str(mergeGDPEDU)
getwd()
setwd("~/Desktop/Getting_and_Cleaning_Data/GettingAndCleaningData_Chan/Project")
require(knitr)
require(markdown)
# setwd("~/GitHub repositories/GettingAndCleaningData/Project")
#setwd("~/Repositories/Coursera/GettingAndCleaningData/Project")
knit("run_analysis.Rmd", encoding="ISO8859-1")
markdownToHTML("run_analysis.md", "run_analysis.html")
setwd("~/Desktop/Getting_and_Cleaning_Data/JProject")
#Load packages
library(data.table)
library(reshape2)
#Set path
path = getwd()
path
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
zipfile = "Dataset.zip"
if (!file.exists(path)) {dir.create(path)}
download.file(url, file.path(path,zipfile))
unzipfiles=unzip(zipfile,"./Data")
unzipfiles=unzip(zipfile="Dataset.zip","./Data")
unzipfiles=unzip(zipfile="Dataset.zip",exdir="./Data")
unzipfiles=unzip(zipfile="Dataset.zip",exdir="./")
pathInput = file.path(path, "UCI HAR Dataset")
list.files(pathInput,recursive = TRUE)
list.files(pathInput,recursive = FALSE)
?fread
dtSubjectTrain <- fread(file.path(pathInput, "train", "subject_train.txt"))
dtSubjectTest <- fread(file.path(pathInput, "test" , "subject_test.txt" ))
dtActivityTrain <- fread(file.path(pathInput, "train", "Y_train.txt"))
dtActivityTest <- fread(file.path(pathInput, "test" , "Y_test.txt" ))
dtDataTrain <- fread(file.path(pathInput, "train", "X_train.txt"))
dtDataTest <- fread(file.path(pathInput, "test" , "X_test.txt" ))
###################Preliminaries###############
#Load packages
library(data.table)
library(reshape2)
#Set path
path = getwd()
path
################# Get the data###################
#Download the zip file, and put it into directory
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
zipfile = "Dataset.zip"
if (!file.exists(path)) {dir.create(path)}
download.file(url, file.path(path,zipfile))
#Unzip the file
unzipfiles=unzip(zipfile="Dataset.zip",exdir="./")
#Set this folder as input path, and check files in the folder
pathInput = file.path(path, "UCI HAR Dataset")
list.files(pathInput,recursive = TRUE) # go inside folders
############### Read files#############################
dtSubjectTrain <- fread(file.path(pathInput, "train", "subject_train.txt"))
dtSubjectTest <- fread(file.path(pathInput, "test" , "subject_test.txt" ))
dtActivityTrain <- fread(file.path(pathInput, "train", "Y_train.txt"))
dtActivityTest <- fread(file.path(pathInput, "test" , "Y_test.txt" ))
dtDataTrain <- fread(file.path(pathInput, "train", "X_train.txt"))
dtDataTest <- fread(file.path(pathInput, "test" , "X_test.txt" ))
dtSubject = rbind(dtSubjectTrain, dtSubjectTest)
View(dtSubject)
library(dplyr)
rename(dtSubject, "subject"="V1")
rename(dtSubject, subject=V1)
dtActivity = rbind(dtActivityTrain,dtActivityTest)
dtData = rbind(dtDataTrain, dtDataTest)
View(dtActivity)
View(dtData)
rename(dtActivity, activityCode=V1)
dtData = cbind(dtSubject,dtActivity,dtData)
dtData
str(dtData)
dtSuject = rename(dtSubject, subject=V1)
dtActivity = rename(dtActivity, activityCode=V1)
dtData = cbind(dtSubject,dtActivity,dtData)
str(dtData)
dtSubject = rename(dtSubject, subject=V1)
dtData = cbind(dtSubject,dtActivity,dtData)
str(dtData)
dtSubject = rename(dtSubject, subject=V1)
dtData = rbind(dtDataTrain, dtDataTest)
dtData = cbind(dtSubject,dtActivity,dtData)
head(dtData)
rm(dtData)
dtData = rbind(dtDataTrain, dtDataTest)
View(dtData)
View(dtSubject)
dtData = cbind(dtSubject,dtActivity,dtData)
View(dtData)
setkey(dtData,subject,activityCode)
?setnames
dtFeatures = fread(file.path(pathInput, "features.txt"))
?rename
setnames(dtFeatures,colnames(dtFeatures),c("featureCode","featureName") )
dtRequireFeatures = dtFeatures[grepl("mean|std",featureName)]
dtRequireFeatures
dtRequireFeatures = dtFeatures[grepl("mean\(\)|std\(\)",featureName)]
dtRequireFeatures = dtFeatures[grepl("mean\\(\\)|std\\(\\)",featureName)]
dtRequireFeatures
dtRequireFeatures$featureCode = dtRequireFeatures[,paste0("V",featureCode)]
head(dtRequireFeatures)
dtData = select(dtData, subject, activityCode, dtRequireFeatures$featureCode)
str(dtRequireFeatures)
dtData = dtData[,c("subject","activityCode",dtRequireFeatures$featureCode)]
str(dtData)
dtSubjectTrain <- fread(file.path(pathInput, "train", "subject_train.txt"))
dtSubjectTest <- fread(file.path(pathInput, "test" , "subject_test.txt" ))
dtActivityTrain <- fread(file.path(pathInput, "train", "Y_train.txt"))
dtActivityTest <- fread(file.path(pathInput, "test" , "Y_test.txt" ))
dtDataTrain <- fread(file.path(pathInput, "train", "X_train.txt"))
dtDataTest <- fread(file.path(pathInput, "test" , "X_test.txt" ))
############## Q1. Merge data ###########################
#Merge Train and Test
dtSubject = rbind(dtSubjectTrain, dtSubjectTest)
dtActivity = rbind(dtActivityTrain,dtActivityTest)
dtData = rbind(dtDataTrain, dtDataTest)
#Rename variables
dtSubject = rename(dtSubject, subject=V1)
dtActivity = rename(dtActivity, activityCode=V1)
#Merge Columns
dtData = cbind(dtSubject,dtActivity,dtData)
#set Key
setkey(dtData,subject,activityCode)
dtData = select(dtData, subject, activityCode, match(colnames(dtData),dtRequireFeatures$featureCode))
names=match(colnames(dtData),dtRequireFeatures$featureCode)
names
isrequire=match(colnames(dtData),dtRequireFeatures$featureCode)
dtData = as.data.frame(dtData)
dtData = dtData[,c("subject", "activityCode",dtRequireFeatures$featureCode)]
dtData = as.data.table(dtData)
dtActivityNames = fread(file.path(pathInput,"activity_labels.txt"))
setnames(dtActivityNames, names(dtActivityNames), c("activityCode", "activityName"))
dtData = merge(dtData, dtActivityNames, by = "activityCode", all.x=TRUE)
str(dtData)
setnames(dtData, colnames(dtData),c("subject", "activityCode",dtRequireFeatures$featureName,"activityName"))
str(dtData)
names(dtData) = gsub("\\(|\\)", "", names(dtData))
names(dtData) = gsub("\\(|\\)", "", names(dtData))
names(dtData) = tolower(names(dtData))
str(dtData)
setkey(dtData,subject,activityname)
dtTidy = dtData[,list(count = .N, average = mean(value)) , by= key(dt)]
dtData$subject=as.character(dtData$subject)
dtTidy = dtData[,list(count = .N, average = mean(value)) , by= key(dt)]
dtTidy = dtData[,list(count = .N, average = mean(value)) , by= key(dtData)]
dtTidy = aggregate(x=dtData, by=list(activities=dtData$activityname, subj=dtData$subject), FUN=mean)
str(dtTidy)
dtTidy = dtTidy[,!(colnames(dtTidy) %in% c("subject","activitycode","activityname")]
dtTidy = select(dtTidy,-(subject,activitycode,activityname))
dtTidy = select(dtTidy,-subject,-activitycode,-activityname)
str(dtTidy)
rename(dtTidy,subject=subj)
rename(dtTidy,subject=subj)
write.table(dtData,'Tidydata1.txt',row.names=FALSE)
write.table(dtTidy,'Tidydata2.txt',row.names=FALSE)
